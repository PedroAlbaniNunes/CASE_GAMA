package com.mycompany.mycase.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AlunosAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlunosAllPropertiesEquals(Alunos expected, Alunos actual) {
        assertAlunosAutoGeneratedPropertiesEquals(expected, actual);
        assertAlunosAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlunosAllUpdatablePropertiesEquals(Alunos expected, Alunos actual) {
        assertAlunosUpdatableFieldsEquals(expected, actual);
        assertAlunosUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlunosAutoGeneratedPropertiesEquals(Alunos expected, Alunos actual) {
        assertThat(actual)
            .as("Verify Alunos auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlunosUpdatableFieldsEquals(Alunos expected, Alunos actual) {
        assertThat(actual)
            .as("Verify Alunos relevant properties")
            .satisfies(a -> assertThat(a.getNome()).as("check nome").isEqualTo(expected.getNome()))
            .satisfies(a -> assertThat(a.getCpf()).as("check cpf").isEqualTo(expected.getCpf()))
            .satisfies(a -> assertThat(a.getMatricula()).as("check matricula").isEqualTo(expected.getMatricula()))
            .satisfies(a -> assertThat(a.getNascimento()).as("check nascimento").isEqualTo(expected.getNascimento()))
            .satisfies(a -> assertThat(a.getAnoLetivo()).as("check anoLetivo").isEqualTo(expected.getAnoLetivo()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlunosUpdatableRelationshipsEquals(Alunos expected, Alunos actual) {
        // empty method
    }
}
